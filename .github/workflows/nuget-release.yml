name: Publish NuGet Packages

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., 1.0.0 or 1.0.0-preview.1)'
        required: true

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          9.0.x
          10.0.x

    - name: Get release version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          RELEASE_VERSION="${{ github.event.release.tag_name }}"
        else
          RELEASE_VERSION="${{ github.event.inputs.release_version }}"
        fi

        echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT

        # Extract assembly version (remove preview suffix if present)
        ASSEMBLY_VERSION=$(echo $RELEASE_VERSION | sed 's/-.*$//')
        echo "assembly_version=$ASSEMBLY_VERSION" >> $GITHUB_OUTPUT

        echo "Release version: $RELEASE_VERSION"
        echo "Assembly version: $ASSEMBLY_VERSION"

    - name: Update template PackageReference versions
      run: |
        echo "Updating template project files with version ${{ steps.version.outputs.release_version }}"
        for csproj in src/Goa.Templates/content/**/*.csproj; do
          echo "Updating $csproj"
          sed -i 's/Include="Goa\.Functions\.\([^"]*\)" Version="[^"]*"/Include="Goa.Functions.\1" Version="${{ steps.version.outputs.release_version }}"/' "$csproj"
        done

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build -c Release --no-restore /p:ContinuousIntegrationBuild=true /p:AssemblyVersion=${{ steps.version.outputs.assembly_version }} /p:PackageVersion=${{ steps.version.outputs.release_version }}

    - name: List generated packages
      run: find artifacts/package/release -name "*.nupkg" -type f

    - name: Publish to NuGet
      run: |
        for package in artifacts/package/release/*.nupkg; do
          echo "Publishing $package"
          dotnet nuget push "$package" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
        done
